{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.query }}\n",
        "options": {
          "systemMessage": "=\nuser_text: freeform user request (string)\n\ndevice: an object describing one Home Assistant entity (the best DB match). This is the same JSON you stored as info.\n\nYour job:\n\nUnderstand the user’s intent for this device only.\n\nProduce exactly one JSON object with the Home Assistant service call.\n\nBe deterministic and safe.\n\nOutput format (MUST be valid JSON)\n{\n  \"ok\": true,\n  \"entity_id\": \"string\",\n  \"domain\": \"domain\",\n  \"service\": \"service\",\n  \"data\": { \"entity_id\": \"string\", \"...\": \"...\" },\n  \"confidence\": 0.0,\n  \"needs_clarification\": false,\n  \"reason\": \"short, one sentenc\"\n}\nrememeber that the service is only one word a wrong service will be \"mediaplayer.play\" its just the word \"play\"\nthe service shoulnt include the domain it just includes the word after the domain\nyou are currently controlling: \n{{ $json.info_text }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        496,
        528
      ],
      "id": "5ab3bd8a-1530-4a12-8077-dceb7aa6e081",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        576,
        752
      ],
      "id": "31d9ed40-257b-4af6-a667-cca4b8af7605",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "****************",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// expects the JSON string in item.json.text (change if yours is different)\nconst items = await $input.all();\n\nfunction extractJson(s) {\n  // 1) plain JSON string\n  try { return JSON.parse(s); } catch {}\n  // 2) fenced code block ```json ... ```\n  const m = s.match(/```(?:json)?\\s*([\\s\\S]*?)```/i);\n  if (m) { try { return JSON.parse(m[1]); } catch {} }\n  // 3) first {...} block\n  const start = s.indexOf('{'), end = s.lastIndexOf('}');\n  if (start >= 0 && end > start) { \n    try { return JSON.parse(s.slice(start, end + 1)); } catch {}\n  }\n  return null;\n}\n\nreturn items.map(i => {\n  const raw = i.json.text ?? i.json.output ?? i.json;        // adjust to where your string lives\n  const str = typeof raw === 'string' ? raw : JSON.stringify(raw);\n  const act = extractJson(str);\n  if (!act) return { json: { error: 'Could not parse JSON', raw: str } };\n\n  // normalize shape: {domain, service, target, data}\n  const a = act.action ?? act;\n  const [d, s] = (a.id || '').split('.');\n  const domain  = a.domain  ?? d;\n  const service = a.service ?? s;\n  const target  = a.target  ?? (a.entity_id ? { entity_id: [a.entity_id].flat() } : {});\n  const data    = a.data    ?? {};\n\n  return { json: { domain, service, target, data, original: act } };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        848,
        528
      ],
      "id": "2361320a-e791-4bd4-907c-d981af060d77",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "resource": "service",
        "returnAll": true
      },
      "type": "n8n-nodes-base.homeAssistant",
      "typeVersion": 1,
      "position": [
        -1232,
        1360
      ],
      "id": "88adcb46-ad38-419f-a7c6-6f8d6b3e86bc",
      "name": "Get many services",
      "credentials": {
        "homeAssistantApi": {
          "id": "****************",
          "name": "Home Assistant account"
        }
      }
    },
    {
      "parameters": {
        "resource": "state",
        "operation": "getAll",
        "returnAll": true
      },
      "type": "n8n-nodes-base.homeAssistant",
      "typeVersion": 1,
      "position": [
        -1232,
        1168
      ],
      "id": "61e7d297-c455-4dc8-8fe6-b0a9371816ba",
      "name": "Get many states",
      "credentials": {
        "homeAssistantApi": {
          "id": "****************",
          "name": "Home Assistant account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code v2 — Run Once for All Items (excluding conversation.home_assistant)\n */\n\nconst merged = await $input.all();  // single input thanks to Merge node\n\n// ---------- collect & filter ----------\nconst states = merged\n  .map(i => i?.json)\n  .filter(o =>\n    o &&\n    o.entity_id &&\n    o.entity_id !== 'conversation.home_assistant' // <- exclude this entity\n  );\n\nconst services = merged\n  .map(i => i?.json)\n  .filter(o => o && o.domain && o.services);\n\nif (!states.length) {\n  throw new Error(\"No state items found from Merge (after exclusions). Check 'Get many states' → Return All = ON and that it feeds the Merge node.\");\n}\nif (!services.length) {\n  throw new Error(\"No service items found from Merge. Check 'Get many services' → Return All = ON and that it feeds the Merge node.\");\n}\n\n// ---------- build service registry index ----------\nconst defsByDomain = {};\nfor (const s of services) defsByDomain[s.domain] = s.services || {};\n\n// ---------- helpers ----------\nconst hasBits = (bitsArr, num) =>\n  !bitsArr?.length || bitsArr.every(b => ((Number(num||0) & Number(b)) === Number(b)));\n\nconst attrMatches = (attrs, filterAttr) => {\n  if (!filterAttr) return true;\n  for (const [k, expected] of Object.entries(filterAttr)) {\n    const v = attrs?.[k];\n    if (Array.isArray(expected)) {\n      if (!Array.isArray(v) || !v.some(x => expected.includes(x))) return false;\n    } else if (v !== expected) return false;\n  }\n  return true;\n};\n\nconst fieldApplies = (attrs, f) => {\n  if (!f?.filter) return true;\n  if (Array.isArray(f.filter.supported_features) && !hasBits(f.filter.supported_features, attrs?.supported_features ?? 0)) return false;\n  if (!attrMatches(attrs, f.filter.attribute)) return false;\n  return true;\n};\n\nconst targetMatches = (entity, target) => {\n  if (!target?.entity?.length) return true;\n  const domain = entity.entity_id.split('.')[0];\n  const a = entity.attributes || {}; const sf = a.supported_features ?? 0;\n  const devClass = a.device_class; const integration = a.integration;\n  return target.entity.some(rule => {\n    if (rule.domain && Array.isArray(rule.domain) && !rule.domain.includes(domain)) return false;\n    if (Array.isArray(rule.supported_features) && !hasBits(rule.supported_features, sf)) return false;\n    if (rule.device_class && devClass && ![].concat(rule.device_class).includes(devClass)) return false;\n    if (rule.integration && integration && rule.integration !== integration) return false;\n    return true;\n  });\n};\n\nconst shallowFlatten = (obj = {}) => {\n  const out = {};\n  for (const [k, v] of Object.entries(obj)) {\n    if (v && typeof v === 'object' && !Array.isArray(v)) {\n      for (const [k2, v2] of Object.entries(v)) out[`${k}.${k2}`] = v2;\n    } else out[k] = v;\n  }\n  return out;\n};\n\n// sample values for fields (hints for the agent)\nfunction sampleForField(name, f) {\n  const sel = f?.selector || {};\n  if ('boolean' in sel) return f.default ?? false;\n  if ('number' in sel) {\n    const r = sel.number || {};\n    const min = Number.isFinite(r.min) ? r.min : 0;\n    const max = Number.isFinite(r.max) ? r.max : 100;\n    const step = Number(r.step || 1);\n    const mid = min + (max - min) / 2;\n    return Number((Math.round(mid / step) * step).toFixed(3));\n  }\n  if ('select' in sel && Array.isArray(sel.select?.options) && sel.select.options.length) {\n    const o = sel.select.options[0]; return typeof o === 'object' ? o.value : o;\n  }\n  if ('color_rgb' in sel) return [255,255,255];\n  if ('color_temp' in sel) return sel.color_temp?.min ?? 3000;\n  if ('date' in sel) return '2025-01-01';\n  if ('time' in sel) return '12:00:00';\n  if ('datetime' in sel) return '2025-01-01 12:00:00';\n  if ('object' in sel) return {};\n  if ('text' in sel) return f.example ?? `<${name}>`;\n  if ('entity' in sel) return '<entity_id>';\n  return f?.example ?? `<${name}>`;\n}\n\n// pull option lists from entity attributes for common fields\nfunction inferOptionsForField(entity, domain, actionName, fname) {\n  const a = entity.attributes || {};\n  const map = {\n    'media_player.select_source': a.source_list,\n    'media_player.select_sound_mode': a.sound_mode_list,\n    'select.select_option': a.options,\n    'input_select.select_option': a.options,\n    'light.turn_on:effect': a.effect_list,\n    'climate.set_hvac_mode:hvac_mode': a.hvac_modes,\n    'climate.set_preset_mode:preset_mode': a.preset_modes,\n    'climate.set_fan_mode:fan_mode': a.fan_modes,\n    'climate.set_swing_mode:swing_mode': a.swing_modes,\n  };\n  const key1 = `${domain}.${actionName}`;\n  const key2 = `${domain}.${actionName}:${fname}`;\n  return map[key2] ?? map[key1] ?? null;\n}\n\nfunction buildAction(entity, dom, name, def) {\n  if (!targetMatches(entity, def?.target)) return null;\n\n  const schema = def?.fields || {};\n  const required = [], optional = [], samples = {}, options = {};\n  for (const [fname, fdef] of Object.entries(schema)) {\n    if (!fieldApplies(entity.attributes, fdef)) continue;\n    (fdef?.required ? required : optional).push(fname);\n    samples[fname] = sampleForField(fname, fdef);\n    const opts = inferOptionsForField(entity, dom, name, fname);\n    if (Array.isArray(opts) && opts.length) options[fname] = opts;\n  }\n\n  const target = required.includes('entity_id') ? {} : { entity_id: [entity.entity_id] };\n  const data   = {};\n  if (required.includes('entity_id')) data.entity_id = entity.entity_id;\n  for (const r of required) if (r !== 'entity_id') data[r] = samples[r];\n\n  return {\n    id: `${dom}.${name}`,\n    title: def?.name ?? `${dom}.${name}`,\n    description: def?.description ?? null,\n    target, data,\n    fields: { required, optional, schema, samples, options },\n  };\n}\n\n// ---------- optional domain enrichers ----------\nfunction samsungCatalog() {\n  return {\n    vendor: \"samsungtv\",\n    aliases: {\n      power: \"KEY_POWER\", mute: \"KEY_MUTE\",\n      volume_up: \"KEY_VOLUP\", volume_down: \"KEY_VOLDOWN\",\n      channel_up: \"KEY_CHUP\", channel_down: \"KEY_CHDOWN\",\n      up: \"KEY_UP\", down: \"KEY_DOWN\", left: \"KEY_LEFT\", right: \"KEY_RIGHT\",\n      ok: \"KEY_ENTER\", back: \"KEY_RETURN\", home: \"KEY_HOME\",\n      play: \"KEY_PLAY\", pause: \"KEY_PAUSE\", stop: \"KEY_STOP\",\n    },\n    notes: [\"Use with remote.send_command via data.command (string or list).\"]\n  };\n}\n\nconst ENRICHERS = {\n  remote(card) {\n    const need = new Set([\"remote.turn_on\",\"remote.turn_off\",\"remote.toggle\",\"remote.send_command\"]);\n    for (const id of need) if (!card.actions.some(a => a.id === id)) {\n      card.actions.push({ id, title: id.split('.')[1], description: null,\n        target: { entity_id: [card.entity_id] }, data: {} });\n    }\n    const n = (card.name || \"\").toLowerCase();\n    if (n.includes(\"samsung\") || n.includes(\"qled\")) card.command_catalog = samsungCatalog();\n  },\n  media_player(card) {\n    const a = card.attributes || {};\n    card.aliases = {\n      play: \"media_player.media_play\",\n      pause: \"media_player.media_pause\",\n      stop: \"media_player.media_stop\",\n      next: \"media_player.media_next_track\",\n      previous: \"media_player.media_previous_track\",\n      volume_up: \"media_player.volume_up\",\n      volume_down: \"media_player.volume_down\",\n      mute:   { action: \"media_player.volume_mute\", data: { is_volume_muted: true } },\n      unmute: { action: \"media_player.volume_mute\", data: { is_volume_muted: false } },\n      set_volume: { action: \"media_player.volume_set\", hint: \"volume_level ∈ [0,1]\" },\n    };\n    if (Array.isArray(a.source_list)) card.capabilities.source_list = a.source_list;\n    if (Array.isArray(a.sound_mode_list)) card.capabilities.sound_mode_list = a.sound_mode_list;\n  },\n  light(card) {\n    const a = card.attributes || {};\n    card.aliases = {\n      on: \"light.turn_on\",\n      off: \"light.turn_off\",\n      toggle: \"light.toggle\",\n      brightness_pct: { action: \"light.turn_on\", field: \"brightness_pct\", hint: \"0-100\" },\n      color_temp_kelvin: { action: \"light.turn_on\", field: \"color_temp_kelvin\", hint: \"≈2000–6500\" },\n    };\n    if (Array.isArray(a.effect_list)) card.capabilities.effect_list = a.effect_list;\n    if (Array.isArray(a.supported_color_modes)) card.capabilities.supported_color_modes = a.supported_color_modes;\n  },\n  climate(card) {\n    const a = card.attributes || {};\n    card.aliases = {\n      set_temperature: \"climate.set_temperature\",\n      set_mode: \"climate.set_hvac_mode\",\n      set_fan_mode: \"climate.set_fan_mode\",\n      set_preset: \"climate.set_preset_mode\",\n      turn_on: \"climate.turn_on\",\n      turn_off: \"climate.turn_off\",\n    };\n    ['hvac_modes','preset_modes','fan_modes','swing_modes','min_temp','max_temp','temperature_unit']\n      .forEach(k => { if (a[k] !== undefined) card.capabilities[k] = a[k]; });\n  },\n  cover(card) {\n    card.aliases = {\n      open: \"cover.open_cover\",\n      close: \"cover.close_cover\",\n      stop: \"cover.stop_cover\",\n      set_position: \"cover.set_cover_position\",\n    };\n  },\n  fan(card) {\n    card.aliases = {\n      on: \"fan.turn_on\",\n      off: \"fan.turn_off\",\n      set_percentage: \"fan.set_percentage\",\n      increase_speed: \"fan.increase_speed\",\n      decrease_speed: \"fan.decrease_speed\",\n      oscillate_on:  { action: \"fan.oscillate\", data: { oscillating: true } },\n      oscillate_off: { action: \"fan.oscillate\", data: { oscillating: false } },\n    };\n  },\n  lock(card) { card.aliases = { lock: \"lock.lock\", unlock: \"lock.unlock\", open: \"lock.open\" }; },\n  switch(card) { card.aliases = { on: \"switch.turn_on\", off: \"switch.turn_off\", toggle: \"switch.toggle\" }; },\n};\n\n// ---------- build actions for an entity ----------\nfunction buildActionsFor(entity) {\n  const domain = entity.entity_id.split('.')[0];\n  const defs = defsByDomain[domain] || {};\n  const actions = [];\n  for (const [name, def] of Object.entries(defs)) {\n    const a = buildAction(entity, domain, name, def);\n    if (a) actions.push(a);\n  }\n  const ha = defsByDomain.homeassistant || {};\n  const domainHas = op => !!defs[op];\n  const addHA = (op, always=false) => {\n    if (!ha[op]) return;\n    if (always || domainHas(op)) {\n      const a = buildAction(entity, 'homeassistant', op, ha[op]);\n      if (a) actions.push(a);\n    }\n  };\n  addHA('turn_on'); addHA('turn_off'); addHA('toggle'); addHA('update_entity', true);\n  return actions.sort((x,y)=>x.id.localeCompare(y.id));\n}\n\n// ---------- build control cards ----------\nconst out = states.map(s => {\n  const [domain, object_id] = s.entity_id.split('.');\n  const card = {\n    entity_id: s.entity_id,\n    domain, object_id,\n    name: s.attributes?.friendly_name ?? null,\n    state: s.state ?? null,\n    attributes: s.attributes ?? {},\n    attributes_flat: shallowFlatten(s.attributes ?? {}),\n    capabilities: {},\n    actions: buildActionsFor(s),\n  };\n  if (ENRICHERS[domain]) ENRICHERS[domain](card);\n  return { json: { control_card: card } };\n});\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        1312
      ],
      "id": "9b60146e-4ef5-4441-8ee1-31ca2735e5f8",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1008,
        1312
      ],
      "id": "7edf0a26-9eac-419a-b22f-0ffcc615539e",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:8123/api/services/{{ $json.domain }}/{{ $json.service }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ********************************"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n(() => {\n  // collect entity_id(s)\n  let ids = [];\n  if ($json.target?.entity_id) {\n    ids = Array.isArray($json.target.entity_id)\n      ? $json.target.entity_id\n      : [$json.target.entity_id];\n  } else if ($json.entity_id) {\n    ids = Array.isArray($json.entity_id) ? $json.entity_id : [$json.entity_id];\n  } else if ($json.original?.target?.entity_id) {\n    ids = Array.isArray($json.original.target.entity_id)\n      ? $json.original.target.entity_id\n      : [$json.original.target.entity_id];\n  }\n\n  // base body\n  const body = {};\n  if (ids.length === 1) body.entity_id = ids[0];\n  else if (ids.length > 1) body.entity_id = ids;\n\n  // merge dynamic service attributes from $json.data\n  const data = ($json.data && typeof $json.data === 'object') ? $json.data : {};\n  for (const k in data) { body[k] = data[k]; }\n\n  return JSON.stringify(body); // Use Raw Body expects a string\n})()\n}}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1072,
        528
      ],
      "id": "19f025c5-d573-4924-8c01-2c74ec16f455",
      "name": "HTTP Request",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "********************************",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1456,
        336
      ],
      "id": "1b1a1b1b-1cd8-4ba0-9464-46558d902836",
      "name": "Webhook",
      "webhookId": "********************************"
    },
    {
      "parameters": {
        "jsCode": "const text = ($('Webhook').first().json.body.query || \"\").toLowerCase().trim();\nconst tokens = text.split(/\\s+/).filter(Boolean);\n\n// Use the whole sentence for FULLTEXT, and the longest word for LIKE fallback\nconst needle = tokens.sort((a,b)=>b.length-a.length)[0] || text;\n\nreturn [{ json: { q: text, needle } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        -400
      ],
      "id": "1cdab079-c902-46df-83e0-9904dec01fe9",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT entity_id, name, info, score\nFROM (\n  (\n    SELECT\n      entity_id,\n      name,\n      info,\n      MATCH(name, keywords) AGAINST ({{ JSON.stringify($json.needle ?? $json.q) }} IN NATURAL LANGUAGE MODE) AS score,\n      1 AS pri\n    FROM ha_devices\n    HAVING score > 0\n    ORDER BY score DESC, updated_at DESC\n    LIMIT 1\n  )\n  UNION ALL\n  SELECT\n    'not_found' AS entity_id,\n    CONCAT('No match for: ', {{ JSON.stringify($json.needle ?? $json.q) }}) AS name,\n    JSON_OBJECT('query', {{ JSON.stringify($json.needle ?? $json.q) }}) AS info,\n    0 AS score,\n    0 AS pri\n) t\nORDER BY pri DESC\nLIMIT 1;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.5,
      "position": [
        -1232,
        -400
      ],
      "id": "b702541c-93cf-45d9-8c46-6f80cce8f425",
      "name": "Execute a SQL query",
      "credentials": {
        "mySql": {
          "id": "****************",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1456,
        1312
      ],
      "id": "dfcf21b0-b848-4f90-a593-3b8c8600b88d",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -560,
        1312
      ],
      "id": "ffc0825c-9995-4b66-aa98-1dbdb8fe9c10",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Loop Over Items').item.json.control_card }}",
        "options": {
          "systemMessage": "You parse one Home Assistant control card and output a structured JSON object.\n\nInput\n\nYou receive a single JSON object shaped like:\n\n{ \"control_card\": { /* arbitrary HA control card */ } }\n\n\nYour job\n\nFrom the control_card, extract:\n\nentity_id (required)\n\nname: prefer control_card.name; else attributes_flat.friendly_name; else attributes.friendly_name; else entity_id\n\nkeywords: build a space-separated string of unique tokens (see rules below)\n\ninfo: the entire control_card serialized as one-line JSON (no pretty printing)\n\nBilingual keyword rules\n\nNormalize: lowercase English; keep Arabic script as-is. Replace . and _ with spaces; collapse multiple spaces; de-duplicate across both languages.\n\nPreserve: entity IDs, brand names, model numbers, codes (e.g., QA50Q60DAUXEG)—do not translate.\n\nAdd Arabic equivalents for common smart-home terms when detected. Use this mini-lexicon (add both English and Arabic forms when a concept appears):\n\nConcept\tEnglish tokens to detect\tAdd Arabic\nlight\tlight, lamp, bulb\tضوء لمبة\nswitch\tswitch, toggle\tمفتاح تبديل\nsensor\tsensor\tمستشعر\nmedia player / tv\tmedia player, tv, television\tمشغل وسائط تلفاز تلفزيون\nvolume\tvolume, volume_up, volume_down\tمستوى الصوت رفع خفض\nmute\tmute, unmute\tكتم إلغاء الكتم\nplay/pause/stop\tplay, pause, stop\tتشغيل إيقاف مؤقت إيقاف\nnext/previous\tnext, previous\tالتالي السابق\npower\tpower, turn_on, turn_off\tطاقة تشغيل إيقاف\nclimate/ac\tclimate, ac\tتكييف مكيف\nbattery/charger\tbattery, charger\tبطارية شاحن\nweather/sun\tweather, sun\tطقس شمس\nperson/home/zone\tperson, home, zone\tشخص المنزل البيت منطقة\nupdate/backup\tupdate, install, reload, backup\tتحديث تثبيت إعادة التحميل نسخ احتياطي\n\nIf a concept isn’t in the lexicon, don’t guess—just include the English token(s).\n\nInclude room-style words you see (e.g., “living room”, “bedroom”) and also add Arabic if obvious:\n\nliving room → غرفة المعيشة الصالون\n\nbedroom → غرفة النوم\n\nOutput\n\nOutput exactly one JSON object with these four keys:\n\n{\n  \"entity_id\": \"<entity_id>\",\n  \"name\": \"<name>\",\n  \"keywords\": \"<flat bilingual keywords string>\",\n  \"info\": \"<one-line serialized JSON of the full control_card>\"\n}\n\n\nEscape single quotes inside values by doubling them.\n\nIf entity_id is missing, output:\n\n{\n  \"entity_id\": \"invalid.missing\",\n  \"name\": \"invalid\",\n  \"keywords\": \"\",\n  \"info\": \"{}\"\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        112,
        1056
      ],
      "id": "4911af85-8fdb-4d35-b0bb-e20e6abac82f",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-nano",
          "mode": "list",
          "cachedResultName": "gpt-5-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        192,
        1280
      ],
      "id": "5cad9841-c6f2-4726-be5b-0d811cffcfde",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "****************",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO ha_devices (entity_id, name, keywords, info)\nVALUES (\n  '{{ $json.entity_id }}',\n  '{{ $json.name }}',\n  '{{ $json.keywords }}',\n  CAST('{{ JSON.stringify($json.info).replace(/'/g, \"''\") }}' AS JSON)\n)\nAS new\nON DUPLICATE KEY UPDATE\n  name = new.name,\n  keywords = new.keywords,\n  info = new.info,\n  updated_at = CURRENT_TIMESTAMP;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.5,
      "position": [
        688,
        1184
      ],
      "id": "eb6ee170-7804-4498-8a69-ed83951ae1c9",
      "name": "Execute a SQL query1",
      "credentials": {
        "mySql": {
          "id": "****************",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6b35059f-3d32-4ad2-816b-81d7a16ee958",
              "leftValue": "={{ $json.found }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -112,
        1056
      ],
      "id": "4bfdf84f-b50c-48f2-ad08-bdd3e9a3c0c5",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT EXISTS(\n  SELECT 1\n  FROM ha_devices\n  WHERE entity_id = '{{ $json.control_card.entity_id }}'\n) AS found;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.5,
      "position": [
        -336,
        1056
      ],
      "id": "37851c7d-fef2-4957-911d-94c5e1bc5f34",
      "name": "Execute a SQL query2",
      "credentials": {
        "mySql": {
          "id": "****************",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.query }}",
        "options": {
          "systemMessage": "you are an ai agent that outputs one word \ndepending on the prompt\n1- \"control\" if the prompt was to control a smart home device\n2- \"inquiry\" when the user wants to inquire about some home device for example the channel name of the tv \n3- \"general\" if the prompt was general"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1232,
        336
      ],
      "id": "9363fbc5-7dda-454a-b826-1a72479d7ae6",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.query }}",
        "options": {
          "systemMessage": "be brief and to the point don't over talk also be friendly and casual for example when the user asks you something in arabic respond in Egyption arabic  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -656,
        624
      ],
      "id": "0526497f-9a73-4baa-aee2-d3daf9a33418",
      "name": "AI Agent4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -240,
        624
      ],
      "id": "9ddf721f-3606-4f70-bc08-a5a39f295b46",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5dd58c00-e9e6-41d2-b719-edecd2ac6e7c",
              "leftValue": "={{ $json.score }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1008,
        -400
      ],
      "id": "e382fef0-7b71-4a71-800c-c311fcf6aa4d",
      "name": "If1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.query }}",
        "options": {
          "systemMessage": "=You are a strict router that, given a user prompt `q` and a catalog of devices, either:\n(A) selects exactly one device or sensor by its entity_id from the provided list, or\n(B) declares that no device exists.\nyou output only one word the required entity id of the required device or sensor \n {{ $json.entity_ids }}\nchoose the most optmial chose for example if I ask you about a channel concentrate whether I ask you about the channel number or name"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -304,
        224
      ],
      "id": "4754973f-c13a-4c23-bdaf-03631ca380bd",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -656,
        848
      ],
      "id": "d3b80646-6321-462f-a879-21aca110296a",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "****************",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -240,
        448
      ],
      "id": "f8f8336a-c304-4c6f-ad59-d2d40618a243",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "****************",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1232,
        560
      ],
      "id": "403401a2-173b-4b32-84c6-686fd4b91f6f",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "****************",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SET SESSION group_concat_max_len = 1000000;\nSELECT CONCAT(\n  '[',\n  GROUP_CONCAT(JSON_QUOTE(entity_id) ORDER BY entity_id SEPARATOR ','),\n  ']'\n) AS entity_ids\nFROM ha_devices;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.5,
      "position": [
        -592,
        336
      ],
      "id": "2a1d4757-b333-44d2-9118-9d53f5505919",
      "name": "Execute a SQL query3",
      "credentials": {
        "mySql": {
          "id": "****************",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Mode: Run Once for Each Item\n\nconst data = $json;\n\nfunction parseLayer(val) {\n  if (typeof val !== 'string') return val;\n  const s = val.trim();\n  try { return JSON.parse(s); } catch { return val; }   // if still string, we'll try again later\n}\n\nfunction parseDeep(val, maxDepth = 2) {\n  let v = val;\n  for (let i = 0; i < maxDepth; i++) {\n    const next = parseLayer(v);\n    if (next === v) break;     // couldn't parse further\n    v = next;\n    if (v && typeof v === 'object') break;  // got object/array\n  }\n  return v;\n}\n\n// 1) Start from `output` if present; else use the item itself\nlet payload = data.output ?? data;\npayload = parseDeep(payload);    // handles stringified JSON\n\n// If parsing failed badly, fall back to top-level fields\nif (!payload || typeof payload !== 'object') payload = { ...data };\n\n// 2) Normalize `info` to an object (it may be double-stringified)\nlet info = payload.info ?? payload;\ninfo = parseDeep(info);\nif (!info || typeof info !== 'object') info = {};  // final guard\n\n// 3) Envelope fields\nconst entity_id = payload.entity_id ?? info.entity_id ?? data.entity_id ?? null;\nconst name      = payload.name      ?? info.name      ?? data.name      ?? null;\nconst keywords  = payload.keywords  ?? data.keywords  ?? '';\n\n// 4) Return proper n8n item\nreturn {\n  json: {\n    entity_id,\n    name,\n    keywords,\n    info,   // guaranteed object\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        1056
      ],
      "id": "a425081c-4933-43b1-9cd6-4f9ef142fb51",
      "name": "Code in JavaScript3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e3329ad5-2be3-4cdc-9156-9a87f40bfff0",
              "leftValue": "={{ $json.output.toJsonString() }}",
              "rightValue": "\"general\"",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -880,
        336
      ],
      "id": "36bfbdcc-5abe-4327-b0b8-5f1a70f5656f",
      "name": "If2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT CAST(info AS CHAR) AS info_text\nFROM ha_devices\nWHERE entity_id = '{{ $json.output }}'\nLIMIT 1;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.5,
      "position": [
        272,
        528
      ],
      "id": "fa9e2d2f-1f3a-464d-be40-b51cd0215d75",
      "name": "Execute a SQL query4",
      "credentials": {
        "mySql": {
          "id": "****************",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.query }}",
        "options": {
          "systemMessage": "you are an assistant your mission is to be friendly and casual and brief \nthe user will ask you things about home control you should respond by confirming that you are currently doing the user's request \nif the prompt is in Arabic you should respond in Egyptian Arabic"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -304,
        -176
      ],
      "id": "fa4853c7-9618-4e73-8c6a-fd0863d3aa8d",
      "name": "AI Agent5"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        48,
        -80
      ],
      "id": "b5385882-2063-462a-88b0-71e634bc0edb",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -240,
        48
      ],
      "id": "e03f8b0c-4dec-4f31-9577-50973818232a",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "****************",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "416b5e3c-18bf-4c45-b999-d2544b76d6a4",
              "leftValue": "={{ $('If2').item.json.output }}",
              "rightValue": "inquiry",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        48,
        336
      ],
      "id": "3aa277e1-480d-40b1-ab58-7e70f3911d3c",
      "name": "If3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.query }}",
        "options": {
          "systemMessage": "=The user asks an inquiry about a certain device your job is to response \nthe device \n{{ $json.toJsonString() }}\nyour should be freindly and breif and to the point and speak in casual Egyption\nyou should be to the point you just should say the thing I want dont add extra unnecessary context\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        496,
        32
      ],
      "id": "e6264132-238b-4aa6-9ab6-2a8a773acab7",
      "name": "AI Agent6"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        576,
        256
      ],
      "id": "b42332b9-8b93-48c1-b1a0-68deb5c1b7c1",
      "name": "OpenAI Chat Model6",
      "credentials": {
        "openAiApi": {
          "id": "****************",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "state",
        "entityId": "={{ $json.output }}"
      },
      "type": "n8n-nodes-base.homeAssistant",
      "typeVersion": 1,
      "position": [
        272,
        128
      ],
      "id": "82d1926d-0806-40df-8a71-580ae9b363db",
      "name": "Get a state",
      "credentials": {
        "homeAssistantApi": {
          "id": "****************",
          "name": "Home Assistant account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4703fa2d-80ed-4a04-81b7-994e186754cc",
              "leftValue": "={{ $json.output }}",
              "rightValue": "inquiry",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -592,
        -80
      ],
      "id": "418435fd-6262-4d71-89ce-a162f3c29386",
      "name": "If4"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        848,
        128
      ],
      "id": "2ef37e0e-e3b0-4c5b-b054-95ceaeb5648b",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.body.source }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1104,
        560
      ],
      "id": "01bff414-5492-4694-9100-fbc0519a98f2",
      "name": "Simple Memory4"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.body.source }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -528,
        848
      ],
      "id": "02a24658-1c24-428e-9622-b5c87f5aa675",
      "name": "Simple Memory5"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many services": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get many states": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get many states",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get many services",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Execute a SQL query2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [],
        []
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query3": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Execute a SQL query3",
            "type": "main",
            "index": 0
          },
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query4": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent5": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Get a state",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute a SQL query4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get a state": {
      "main": [
        [
          {
            "node": "AI Agent6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent6": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "AI Agent5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory4": {
      "ai_memory": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory5": {
      "ai_memory": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "********************************",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "****************************************************************"
  },
  "id": "****************",
  "tags": []
}